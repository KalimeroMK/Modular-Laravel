<?php

namespace App\Modules\{{module}}\Services;

use App\Modules\{{module}}\Exceptions\{{module}}DestroyException;
use App\Modules\{{module}}\Exceptions\{{module}}IndexException;
use App\Modules\{{module}}\Exceptions\{{module}}NotFoundException;
use App\Modules\{{module}}\Exceptions\{{module}}SearchException;
use App\Modules\{{module}}\Exceptions\{{module}}StoreException;
use App\Modules\{{module}}\Exceptions\{{module}}UpdateException;
use App\Modules\{{module}}\Interfaces\{{module}}Interface;
use Exception;

class {{module}}Service
{
    /**
     * @var {{module}}Interface
     */
    public {{module}}Interface ${{module_lower}}Repository;

    /**
     * @param {{module}}Interface ${{module_lower}}Repository
     */
    public function __construct({{module}}Interface ${{module_lower}}Repository)
    {
        $this->{{module_lower}}Repository = ${{module_lower}}Repository;
    }

    /**
     * @param int $id
     * @return mixed
     * @throws {{module}}NotFoundException
     */
    public function getById(int $id): mixed
    {
        try {
            return $this->{{module_lower}}Repository->findById($id);
        } catch (Exception $exception) {
            throw new {{module}}NotFoundException($exception);
        }
    }

    /**
     * @return mixed
     * @throws {{module}}IndexException
     */
    public function getAll(): mixed
    {
        try {
            return $this->{{module_lower}}Repository->findAll();
        } catch (Exception $exception) {
            throw new {{module}}IndexException($exception);
        }
    }

    /**
     * @param array $data
     * @return mixed
     * @throws {{module}}StoreException
     */
    public function create(array $data): mixed
    {
        try {
            return $this->{{module_lower}}Repository->create($data);
        } catch (Exception $exception) {
            throw new {{module}}StoreException($exception);
        }
    }

    /**
     * @param array $data
     * @return mixed
     * @throws {{module}}UpdateException
     */
    public function update(int $id, array $data): mixed
    {
        try {
            return $this->{{module_lower}}Repository->update($id, $data);
        } catch (Exception $exception) {
            throw new {{module}}UpdateException($exception);
        }
    }

    /**
     * @param int $id
     * @return mixed|void
     * @throws {{module}}DestroyException
     */
    public function delete(int $id)
    {
        try {
            return $this->{{module_lower}}Repository->delete($id);
        } catch (Exception $exception) {
            throw new {{module}}DestroyException($exception);
        }
    }

    /**
     * @param array $data
     * @return mixed|void
     * @throws {{module}}SearchException
     */
    public function search(array $data)
    {
        try {
            return $this->{{module_lower}}Repository->search($data);
        } catch (Exception $exception) {
            throw new {{module}}SearchException($exception);
        }
    }
}
