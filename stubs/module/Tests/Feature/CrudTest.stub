<?php

declare(strict_types=1);

namespace Tests\Feature\Modules\{{module}};

use App\Modules\{{module}}\Models\{{module}};
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class {{module}}CrudTest extends TestCase
{
    use RefreshDatabase;

    public function test_can_create_{{module_lower}}(): void
    {
        $payload = [
{{store_data}}
        ];
        $response = $this->postJson('/api/v1/{{module_lower}}s', $payload);
        $response->assertStatus(200)
            ->assertJsonStructure(['data' => ['id', 'created_at', 'updated_at']]);
        $this->assertDatabaseHas('{{table}}', $payload);
    }

    public function test_can_list_{{module_lower}}s(): void
    {
        {{module}}::factory()->count(2)->create();
        $response = $this->getJson('/api/v1/{{module_lower}}s');
        $response->assertStatus(200)
            ->assertJsonStructure(['data' => [['id', 'created_at', 'updated_at']]]);
    }

    public function test_can_show_{{module_lower}}(): void
    {
        ${{module_lower}} = {{module}}::factory()->create();
        $response = $this->getJson("/api/v1/{{module_lower}}s/{${{module_lower}}->id}");
        $response->assertStatus(200)
            ->assertJsonStructure(['data' => ['id', 'created_at', 'updated_at']]);
    }

    public function test_can_update_{{module_lower}}(): void
    {
        ${{module_lower}} = {{module}}::factory()->create();
        $payload = [
{{update_data}}
        ];
        $response = $this->putJson("/api/v1/{{module_lower}}s/{${{module_lower}}->id}", $payload);
        $response->assertStatus(200)
            ->assertJsonStructure(['data' => ['id', 'created_at', 'updated_at']]);
        $this->assertDatabaseHas('{{table}}', array_merge(['id' => ${{module_lower}}->id], $payload));
    }

    public function test_can_delete_{{module_lower}}(): void
    {
        ${{module_lower}} = {{module}}::factory()->create();
        $response = $this->deleteJson("/api/v1/{{module_lower}}s/{${{module_lower}}->id}");
        $response->assertStatus(200)
            ->assertJson(['message' => '{{module}} deleted']);
        $this->assertDatabaseMissing('{{table}}', ['id' => ${{module_lower}}->id]);
    }
}
